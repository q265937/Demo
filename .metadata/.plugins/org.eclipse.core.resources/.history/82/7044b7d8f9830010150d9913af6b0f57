package com.user.service;

import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.user.dto.UserDTO;
import com.user.entity.Role;
import com.user.entity.User;
import com.user.repository.UserRepository;

@Service
public class UserService {
	
	private UserRepository userRepo;
	private final JwtService jwtServ;
	private final PasswordEncoder passwordEncoder;
	private final AuthenticationManager authManager;

	public UserService(UserRepository userRepo) {
	
	
	public UserService(UserRepository userRepo, JwtService jwtServ, PasswordEncoder passwordEncoder,
			AuthenticationManager authManager) {
		this.userRepo = userRepo;
		this.jwtServ = jwtServ;
		this.passwordEncoder = passwordEncoder;
		this.authManager = authManager;
	}


	public User register(User user) {
		if(user != null) {
			user.setRole(Role.USER);
			userRepo.save(user);
			return user;
		}else {
			throw new RuntimeException("No or incomplete values");
		}
	}
	
	
	public ResponseEntity<?> loginEmployee(UserDTO userDTO){
		try {
			Authentication authentication = authManager.authenticate(new UsernamePasswordAuthenticationToken(userDTO.getEmail(), userDTO.getPassword()));
		}
	}
	
	public User findByUsername(String username) {
		User u = userRepo.findByUsername(username).orElseThrow(() -> new RuntimeException("User not found"));
		
		return u;
	}
	
	public String deleteUser(int id) {
		User user = userRepo.findById(id).orElse(null);
		
		if(user != null) {
			userRepo.delete(user);
			return "Deleted user successfully";
		}else {
			throw new RuntimeException("Error deleting");
		}
		
	}
	
}
