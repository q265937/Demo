package com.user.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableMethodSecurity
@EnableWebSecurity
public class SecurityConfig {
	@Autowired
    private JwtFilter jwtFilter;
    private final CustomUserService cuServ;

    public SecurityConfig(CustomUserService cuServ) {
        this.cuServ = cuServ;
    }

	
	@Bean
	SecurityFilterChain secChain(HttpSecurity http) throws Exception{
		return http
				.csrf(csrf -> csrf.disable())
				.authorizeHttpRequests(request -> request
						.requestMatchers("/user/**").permitAll()
				).build();
	}
	
	 @Bean
	    AuthenticationProvider authProvider(){
	        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
	        provider.setUserDetailsService(cuServ);
	        provider.setPasswordEncoder(new BCryptPasswordEncoder());
	        return provider;
	    }

	    @Bean
	    PasswordEncoder passwordEncoder(){
	        return new BCryptPasswordEncoder();
	    }

	    @Bean
	    AuthenticationManager authManager(AuthenticationConfiguration config) throws Exception{
	        return config.getAuthenticationManager();
	    }
}
